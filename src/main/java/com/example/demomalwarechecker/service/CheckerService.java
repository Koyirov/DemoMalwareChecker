package com.example.demomalwarechecker.service;

import com.example.demomalwarechecker.model.CheckEvent;
import com.example.demomalwarechecker.model.CheckResultEvent;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.stereotype.Service;

import java.io.*;
import java.net.URL;
import java.util.concurrent.*;


@Service
public class CheckerService {

    static final String correctEndOfFile = ".pdf";


    public CheckResultEvent checkIban(CheckEvent checkEvent) {

        try {
            String documentUrl = checkEvent.getUrl();
            String fileType =   checkEvent.getFileType();
            CheckResultEvent checkResultEvent = new CheckResultEvent();

            CacheService cacheService = new CacheService();
            CheckResultEvent checkResultEventOfCache = cacheService.getCheckResultEvent(documentUrl);
            if(checkResultEventOfCache != null){
                return checkResultEventOfCache;
            }

            String endOfDocumentUrl = documentUrl.substring(documentUrl.length() - 4);
            if(!correctEndOfFile.contains(fileType) || !endOfDocumentUrl.equalsIgnoreCase(correctEndOfFile)){
                return handleWrongFileFormatCase(checkResultEvent, cacheService, documentUrl);
            }

            PDDocument document = loadDocument(documentUrl);
            if (document == null) {
                return handleNoFileCase(checkResultEvent, cacheService, documentUrl);
            } else {
                String contentOfDocument = extractTextFromDocument(document);
                boolean hasDocumentSuspectedIban = hasDocumentSuspectedIban(contentOfDocument);
                checkResultEvent.setName(document.getDocumentInformation().getTitle());
                if(hasDocumentSuspectedIban){
                    return handleSuspectedIBANCase(checkResultEvent, cacheService, documentUrl);
                }else{
                    return handleOKCase(checkResultEvent, cacheService, documentUrl);
                }
            }
        } catch (Exception e) {
            return handleExceptionCase(e);
        }
    }

    private PDDocument loadDocument(String documentUrl) throws IOException, TimeoutException {
        if(documentUrl.startsWith("http")){
                return PDDocument.load(new URL(documentUrl).openStream());
        } else {
            return PDDocument.load(new File(documentUrl));
        }
    }

    private String extractTextFromDocument(PDDocument document) throws IOException, TimeoutException {
        PDFTextStripper stripper = new PDFTextStripper();
        return stripper.getText(document);
    }

    private boolean hasDocumentSuspectedIban(String contentOfDocument) throws TimeoutException {
        IbanBlackListService ibanBlackListService = new IbanBlackListService();
        return ibanBlackListService.isIbanInBlackList(contentOfDocument);
    }

    private CheckResultEvent handleWrongFileFormatCase(CheckResultEvent checkResultEvent, CacheService cacheService, String documentUrl){
        checkResultEvent.setName("Unknown");
        checkResultEvent.setState(CheckResultEvent.StateEnum.IGNORED);
        checkResultEvent.setDetails("Document type is not PDF");
        cacheService.addCheckResultEvent(documentUrl, checkResultEvent);
        return checkResultEvent;
    }

    private CheckResultEvent handleNoFileCase(CheckResultEvent checkResultEvent, CacheService cacheService, String documentUrl){
        checkResultEvent.setName("Unknown");
        checkResultEvent.setState(CheckResultEvent.StateEnum.IGNORED);
        checkResultEvent.setDetails("Document doesn't exist");
        cacheService.addCheckResultEvent(documentUrl, checkResultEvent);
        return checkResultEvent;
    }

    private CheckResultEvent handleSuspectedIBANCase(CheckResultEvent checkResultEvent, CacheService cacheService, String documentUrl){
        checkResultEvent.setState(CheckResultEvent.StateEnum.SUSPICIOUS);
        checkResultEvent.setDetails("Document contains suspected IBAN");
        cacheService.addCheckResultEvent(documentUrl, checkResultEvent);
        return checkResultEvent;
    }

    private CheckResultEvent handleOKCase(CheckResultEvent checkResultEvent, CacheService cacheService, String documentUrl){
        checkResultEvent.setState(CheckResultEvent.StateEnum.OK);
        checkResultEvent.setDetails("Document doesn't contain suspected IBAN");
        cacheService.addCheckResultEvent(documentUrl, checkResultEvent);
        return checkResultEvent;
    }

    private CheckResultEvent handleExceptionCase(Exception e){
        CheckResultEvent checkResultEvent = new CheckResultEvent();
        checkResultEvent.setName("Unknown");
        checkResultEvent.setState(CheckResultEvent.StateEnum.ERROR);
        checkResultEvent.setDetails(e.getMessage());
        return checkResultEvent;
    }
}
